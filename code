# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos = 0
paddle2_pos = 0
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0
# initialize ball_pos and ball_vel for new bal in middle of table
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [1, 2]
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel [1] = -random.randrange(60, 180) / 100
    if(direction == RIGHT):
        ball_vel [0] = random.randrange(120, 240) / 100
    elif (direction == LEFT):
        ball_vel [0] = -random.randrange(120, 240) / 100
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_circle(ball_pos, BALL_RADIUS, 5, 'White', 'Blue')
    # bottom and top wall colision
    if (ball_pos[1] - BALL_RADIUS <= 0 or ball_pos[1] + BALL_RADIUS >= HEIGHT):
        ball_vel [1] = - ball_vel [1]
    # Left and right gutters and paddle collision and update position of ball
    if (ball_pos[0] <= PAD_WIDTH + BALL_RADIUS):
        if (ball_pos[1] >= paddle1_pos and ball_pos[1] <= paddle1_pos + 80):
            ball_vel [0] = - ball_vel [0] - 0.1 * ball_vel [0]
            ball_vel [1] = ball_vel [1] + 0.1 * ball_vel [1]
            ball_pos [0] += ball_vel [0]
            ball_pos [1] += ball_vel [1]
        else:  
            score2 += 1
            spawn_ball(RIGHT)
    elif (ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS):
        if (ball_pos[1] >= paddle2_pos and ball_pos[1] <= paddle2_pos + 80):
            ball_vel [0] = - ball_vel [0] - 0.1 * ball_vel [0]
            ball_vel [1] = ball_vel [1] + 0.1 * ball_vel [1]
            ball_pos [0] += ball_vel [0]
            ball_pos [1] += ball_vel [1]
        else:
            score1 += 1
            spawn_ball(LEFT)
    else:
        ball_pos [0] += ball_vel [0]
        ball_pos [1] += ball_vel [1]        
    # update paddle's vertical position, keep paddle on the screen
    if (paddle1_pos + paddle1_vel >= 0 and paddle1_pos + 80 + paddle1_vel <= HEIGHT):
        paddle1_pos += paddle1_vel
    if (paddle2_pos + paddle2_vel >= 0 and paddle2_pos + 80 + paddle2_vel <= HEIGHT):
        paddle2_pos += paddle2_vel
    # draw paddles
    canvas.draw_line((0, paddle1_pos), (PAD_WIDTH, paddle1_pos), 1, 'WHITE')
    canvas.draw_line((0, paddle1_pos + PAD_HEIGHT), (PAD_WIDTH, paddle1_pos +PAD_HEIGHT),
                     1, 'White')
    canvas.draw_line((WIDTH, paddle2_pos), (WIDTH - PAD_WIDTH, paddle2_pos), 1, 'WHITE')
    canvas.draw_line((WIDTH, paddle2_pos + PAD_HEIGHT), (WIDTH - PAD_WIDTH,
                     paddle2_pos +PAD_HEIGHT), 1, 'White')
    canvas.draw_polygon([(0, paddle1_pos), (PAD_WIDTH, paddle1_pos), (PAD_WIDTH, paddle1_pos + 80),
                         (0, paddle1_pos + 80)], 1, 'White', "white")
    canvas.draw_polygon([(WIDTH, paddle2_pos), (WIDTH - PAD_WIDTH, paddle2_pos), (WIDTH - PAD_WIDTH, paddle2_pos + 80),
                         (WIDTH, paddle2_pos + 80)], 1, 'White', "white")

        
    # draw scores
    canvas.draw_text(str(score1), (150, 50), 40, 'Red')
    canvas.draw_text(str(score2), (450, 50), 40, 'Red')
def keydown(key):
    global paddle1_vel, paddle2_vel
    if (key == simplegui.KEY_MAP["up"]):
        paddle2_vel -= 3
    elif (key == simplegui.KEY_MAP["down"]):
        paddle2_vel += 3
    elif (key == simplegui.KEY_MAP["w"]):
        paddle1_vel -= 3
    elif (key == simplegui.KEY_MAP["s"]):
        paddle1_vel += 3
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if (key == simplegui.KEY_MAP["up"]):
        paddle2_vel = 0
    elif (key == simplegui.KEY_MAP["down"]):
        paddle2_vel = 0
    elif (key == simplegui.KEY_MAP["w"]):
        paddle1_vel = 0
    elif (key == simplegui.KEY_MAP["s"]):
        paddle1_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Restart', new_game)

# start frame
new_game()
frame.start()
